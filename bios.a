include "doki.a"

section bios_rom_section [base=bios_rom]

i = tmp0
j = tmp1

byte 0, 0 ; padding

jmp clear_vram
jmp video_on
jmp video_off
jmp vblank_wait
jmp seek_page
jmp read_pages

clear_vram:
  dst reg_dma
  cpy 0x00
  cpy 0x00
  cpy lo(vram)
  cpy hi(vram)
  cpy 0x00
  cpy 0x44
  cpy dma_src_fixed

  dst reg_dma
  cpy 0xF0
  cpy 0x00
  cpy lo(vram_sprite_attr)
  cpy hi(vram_sprite_attr)
  cpy 0x00
  cpy 0x02
  cpy dma_src_fixed

  jmp reg_bios_return

video_on:
  mov video_enabled
  wri reg_video_control
  jmp reg_bios_return

video_off:
.wait:
  clr reg_video_control
  mov reg_video_status
  shl 7
  neq 0b10000000
  jmp .wait
  clr reg_video_status
  jmp reg_bios_return

vblank_wait:
  mov reg_video_status
  shl 7
  neq 0b10000000
  jmp vblank_wait
  clr reg_video_status
  jmp reg_bios_return

seek_page:
  mov disk_seek
  wri reg_disk_fifo
  mov 0x00
  wri reg_disk_fifo
  mov arg0
  wri reg_disk_fifo
  mov arg1
  wri reg_disk_fifo

read_pages:
  dst reg_dma
  cpy lo(reg_disk_fifo)
  cpy hi(reg_disk_fifo)
  cpy 0x00
  cpy arg0
  cpy 0x00
  cpy 0x00
  clr i
.page_loop:
  clr j
.byte_loop:
  clr reg_disk_fifo
.wait:
  mov reg_disk_status
  neq disk_status_ready
  jmp .wait
  mov 1
  wri reg_dma_count_lo
  mov dma_src_fixed
  wri reg_dma_start
  inc j
  mov j
  neq 0
  jmp .byte_loop
  inc i
  mov i
  neq arg1
  jmp .page_loop
  jmp reg_bios_return
